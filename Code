from Crypto.Util.number import long_to_bytes

n = 990853953648382437503731888872568785013804329239290721076418541795771569507440261620612308640652961121590348037236708702361580700250705591203587939980126323233833431892076634892318387020242015741789265095380967467201291693288654956012435416445991341222221539511583706970342630678909437274145759598920314784293470918464283814408418704426938549136143925649863711450268227592032494660523680280136089617838412326902639568680941504799777445608524961048789627301462833
c = 312168688094168684887530746663711142224819184527420449851136749248641895825646649162310024737395663075921549510262779965673286770730468773215063305158197748549937395602308558217528064655976647148323981103647078862713773074121667862786737690376212246588956833193632937835958166526006128435536115531865213269197137648990987207140262543956087199861542889002996727146832659889656384027201202873352819689303456895088190857667281342371263570535523695457095802010885279
rot_x = (9.93659400123277470926327676478883140697376509010297766512845139881487348637477791719517951397052010880811619509960535668814993293095146708957649613776125686226138447162258666762024346093786649228730054881453449071976210130217897905782845690384638460560301964009359233596889465133986468021963885911072779457835979983964294586954038412718305000570678333513135467257498071686562749882446495426493483289204e230, -1.20540611958254673086539287012513674064476659427085664430224592760592531301348857885707154893714440960111029743010026152632150988429192286517249118913535366887447596463819555191858702861383725310592687577510708180057642425944345656558038998574368521689142109798891989865473206201635908814994474491537093810680632691594902962470061189337645818851446622588020765058461348047229165216450857822980873846637e230)
rot_y = (9.02899744041999015549480362358897037217795303901085937071039171882835297563545959015336648016772002396355451308252077767567617065937943765701645833054147976124287566465577491039263554806622908070370269238064956822205986576949383035741108310668397305286076364909407660314991847716094610949669608550117248147017329449889127749721988228613503029640191269319151291514601769696635252288607881829734506023770e191, 2.82245306887391321716872765000993510002376761684498801971981175059452895101888694909625866715259620501905532121092041448909218372087306882364769769589919830746245167403566884491547911250261820661981772195356239940907493773024918284094309809964348965190219508641693641202225028173892050377939993484981988687903270349415531065381420872722271855270893103191849754016799925873189392548972340802542077635974e192)

F = RealField(1337)
rot_x = vector(F, rot_x)
rot_y = vector(F, rot_y)
nxsq_old =rot_x * rot_x
nysq_old =rot_y * rot_y
e = (2*n - nxsq_old) / nysq_old
e = ZZ(QQ(e.numerical_approx(prec  = 700, digits = 400)))
nysq = ZZ(nysq_old.round())
nxsq = ZZ(2*n - e*nysq)

lb = -pi/2
up = pi/2

theta = (lb+up) / 2
R = matrix(F, [[cos(theta), -sin(theta)], [sin(theta), cos(theta)]])
Rinv = R^-1
newx = Rinv * vector(rot_x)
newy = Rinv * vector(rot_y)
tmpx1 = round(newx[0])
tmpx2 = round(newx[1])
tmpy1 = round(newy[0])
tmpy2 = round(newy[1])
if (tmpx2 < 0 or tmpy2 < 0):
    up = theta
elif (tmpx1 < 0 or tmpy1 < 0):
    lb = theta    
elif (tmpx1.nbits() >768 or tmpy1.nbits()>640):
    up = theta        
elif (tmpx2.nbits() >768 or tmpy2.nbits()>640):
    lb = theta

for j in range(8000):
    theta = (lb+up) / 2
    R = matrix(F, [[cos(theta), -sin(theta)], [sin(theta), cos(theta)]])
    Rinv = R^-1
    newx = Rinv * vector(rot_x)
    newy = Rinv * vector(rot_y)
    tmpx1 = round(newx[0])
    tmpx2 = round(newx[1])
    tmpy1 = round(newy[0])
    tmpy2 = round(newy[1])
    lhs1 = tmpx1^2 + e*tmpy1^2
    lhs2 = tmpx2^2 + e*tmpy2^2
    if (lhs1 > n or lhs2 <n):
        up = theta
    else:
        lb = theta
    if (abs(lhs1 - n) == 0 and abs(lhs2 - n)==0):
        print("found")
        x1 = tmpx1
        x2 = tmpx2
        y1 = tmpy1
        y2 = tmpy2
        break

assert x1.nbits() <= 768 and x2.nbits() <= 768
assert y1.nbits() <= 640 and y2.nbits() <= 640
assert x1 ** 2 + e * y1 ** 2 == n
assert x2 ** 2 + e * y2 ** 2 == n
assert x1^2 + x2^2 == nxsq
assert y1^2 + y2^2 == nysq

tmp = int(x1 * pow(y1, -1, n))
assert((tmp^2 + e) % n == 0)
pfake =(x2 + tmp*y2) % n
qfake =(x2 - tmp*y2) % n
p = gcd(pfake, n)
q = n//p
phi = (p-1)*(q-1)
d = pow(e, -1, phi)
m = pow(c, d, n)
m = int(m) ^^ x1 ^^ x2 ^^ y1 ^^ y2
print(m)
print(long_to_bytes(m))
